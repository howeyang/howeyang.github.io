{"ast":null,"code":"var _jsxFileName = \"/Users/howeyang/Coding/react/devlog/src/ProjectAutoBattler.js\";\nimport React, { Component } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ReactPlayer from \"react-player\";\nimport AutoBattleCarousel from \"./AutoBattleCarousel\";\n\nclass ProjectAutoBattler extends Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"white1 underline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, \" \", \"Project: \", React.createElement(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, \"Auto Battler\"), \" \"), React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"center\",\n      alignItems: \"stretch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"black2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \" Introduction\"), React.createElement(\"p\", {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"Around January 2019, I started playing a custom game mode in Dota 2 that was taking the gaming community by storm, Dota Autochess by Studio Drodo. The game mode itself was inspired by older custom games: Pokemon TD from Warcraft3 and Casino TD from Starcraft 2. When playing the game, I was inspired to create a single-player spin on the game. Thus, I got to work to paper prototyping and began to bring my vision to life in Unity.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }), \" \", React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"Project Goal\"), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }), \"Although it would be nice to make a ton of money and retire, this project's goal was much more modest. The goal was to create a Minimal Viable Product and polish it to the point where I could be proud to include it on my resume.\")), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      md: 6,\n      className: \"overlay2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"black2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \" \", \"Latest version \", React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"On haitus\")), React.createElement(\"div\", {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(ReactPlayer, {\n      url: \"test.mp4\",\n      width: \"100%\",\n      height: \"100%\",\n      controls: true,\n      playing: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }))), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"black2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Challenges and Components\"), React.createElement(\"p\", {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Building the board\"), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), \"The board / grid in which the player's units and enemy control units fight on was a big challenge to tackle. I started with a naive String Array implementation with the intention of storing their placement but I quickly felt it's limitations.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), \" To gain more functionality, I created a Node struct and began to build a grid of Nodes. The Node data structure allowed me to store data, hold references to their neighbours and able to do simple heuristic pathing to other nodes via the A* Algorithim.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Creating AI and Autonomous combat\"), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), \"Creating the AI for the game meant building a modular script that could run independantly in each game unit. Performance and synchronous combat was a big concern for me. This lead me to coding the AI script with no Update logic. Instead, all units relied on the board script to invoke a Stepping function which make it run through it's logic. The downside of this was creating a tight coupling between the board and all units. The upside of this was significantly reduced performance concerns and allowed a sequential resolution of action and behaviours.\")), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      md: 6,\n      className: \"overlay2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"black2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Development Snapshots\"), React.createElement(AutoBattleCarousel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"black2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Lessons Learned\"), React.createElement(\"p\", {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Over Designing\"), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), \"I often kept going back to paper prototyping certain features / concepts. Although this invigorated myself to keep working at this project, very few of what I designed and thought of made it into the prototype build. My lack of focus on and over designing non-essential features wasted a lot of time and brain power.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), \" \", React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Too Tight Coupling\"), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), \"This sucked\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), \" \", React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Monolithic or Tiny\"), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), \"Moderation or finding the right balance is something that I will try to work towards.\")), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      md: 6,\n      className: \"overlay2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"black2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \" Future Considerations\"), React.createElement(\"p\", {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"In all honesty, not sure who would read this far, but this project was probably the most feature complete and playable game I built since University. It was a good exercise for planning, coding and execution. Quick code prototyping definitely helps to hack something together but it is necessary to clean it up and identify what should be generic, flexible and readable. Hopefully, I can apply what I learned here to future projects.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Thank you for reading!\")))));\n  }\n\n}\n\nexport default ProjectAutoBattler;","map":{"version":3,"sources":["/Users/howeyang/Coding/react/devlog/src/ProjectAutoBattler.js"],"names":["React","Component","Grid","ReactPlayer","AutoBattleCarousel","ProjectAutoBattler","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ReactPlayer from \"react-player\";\nimport AutoBattleCarousel from \"./AutoBattleCarousel\";\n\nclass ProjectAutoBattler extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"white1 underline\">\n          {\" \"}\n          Project: <a>Auto Battler</a>{\" \"}\n        </div>\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"stretch\">\n          <Grid item xs={12} sm={6} md={6}>\n            <div className=\"black2\"> Introduction</div>\n\n            <p className=\"section\">\n              Around January 2019, I started playing a custom game mode in Dota\n              2 that was taking the gaming community by storm, Dota Autochess by\n              Studio Drodo. The game mode itself was inspired by older custom\n              games: Pokemon TD from Warcraft3 and Casino TD from Starcraft 2.\n              When playing the game, I was inspired to create a single-player\n              spin on the game. Thus, I got to work to paper prototyping and\n              began to bring my vision to life in Unity.\n              <br /> <label>Project Goal</label> <br />\n                Although it would be nice to make a ton of money and retire, this project's goal was much more modest. The goal was to create a Minimal Viable Product and polish it to the point where I could be proud to include it on my resume.\n            </p>\n          </Grid>\n\n          <Grid item xs={12} sm={6} md={6} className=\"overlay2\">\n            <div className=\"black2\">\n              {\" \"}\n              Latest version <label>On haitus</label>\n            </div>\n            <div className=\"section\">\n              <ReactPlayer\n                url=\"test.mp4\"\n                width=\"100%\"\n                height=\"100%\"\n                controls={true}\n                playing={true}\n              />\n            </div>\n          </Grid>\n\n          <Grid item xs={12} sm={6} md={6}>\n            <div className=\"black2\">Challenges and Components</div>\n\n            <p className=\"section\">\n              <label>Building the board</label> <br />\n              The board / grid in which the player's units and enemy control\n              units fight on was a big challenge to tackle. I started with a\n              naive String Array implementation with the intention of storing\n              their placement but I quickly felt it's limitations.\n              <br /> To gain more functionality, I created a Node struct and\n              began to build a grid of Nodes. The Node data structure allowed me\n              to store data, hold references to their neighbours and able to do\n              simple heuristic pathing to other nodes via the A* Algorithim.\n              <br />\n              <label>Creating AI and Autonomous combat</label> <br />\n              Creating the AI for the game meant building a modular script that\n              could run independantly in each game unit. Performance and\n              synchronous combat was a big concern for me. This lead me to\n              coding the AI script with no Update logic. Instead, all units\n              relied on the board script to invoke a Stepping function which\n              make it run through it's logic. The downside of this was creating\n              a tight coupling between the board and all units. The upside of\n              this was significantly reduced performance concerns and allowed a\n              sequential resolution of action and behaviours.\n            </p>\n          </Grid>\n\n          <Grid item xs={12} sm={6} md={6} className=\"overlay2\">\n            <div className=\"black2\">Development Snapshots</div>\n            <AutoBattleCarousel />\n          </Grid>\n\n          <Grid item xs={12} sm={6} md={6}>\n            <div className=\"black2\">Lessons Learned</div>\n\n            <p className=\"section\">\n              <label>Over Designing</label> <br />\n              I often kept going back to paper prototyping certain features / concepts. Although this invigorated myself to keep working at this project, very few of what I designed and thought of made it into the prototype build. My lack of focus on and over designing non-essential features wasted a lot of time and brain power.\n              <br /> <label>Too Tight Coupling</label> <br />\n              This sucked\n              <br /> <label>Monolithic or Tiny</label> <br />\n              Moderation or finding the right balance is something that I will\n              try to work towards.\n            </p>\n          </Grid>\n\n          <Grid item xs={12} sm={6} md={6} className=\"overlay2\">\n            <div className=\"black2\"> Future Considerations</div>\n            <p className=\"section\">\n              In all honesty, not sure who would read this far, but this project\n              was probably the most feature complete and playable game I built\n              since University. It was a good exercise for planning, coding and\n              execution.\n\n              Quick code prototyping definitely helps to hack something together but it is necessary to clean it up and identify what should be generic, flexible and readable.\n              Hopefully, I can apply what I learned here to future projects.<br></br>\n              <label>Thank you for reading!</label>\n            </p>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default ProjectAutoBattler;\n"]},"metadata":{},"sourceType":"module"}